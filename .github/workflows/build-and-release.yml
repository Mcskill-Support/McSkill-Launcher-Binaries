name: Build and Release Binaries

on:
  push:
    branches: [master]

permissions:
  contents: write

jobs:
  build-all:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: linux-x64
            ext: ""
          - os: windows-latest
            target: windows-x64
            ext: ".exe"
          - os: macos-latest
            target: macos-x64
            ext: ""

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build binary
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            pyinstaller main.py --name "McSkillLauncher" --windowed --onefile --noupx
          else
            pyinstaller main.py --name main-${{ matrix.target }} --onefile --noupx
          fi
        shell: bash

      - name: Replace Info.plist and set icon (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cp Info.plist dist/McSkillLauncher.app/Contents/Info.plist
          cp icon.icns dist/McSkillLauncher.app/Contents/Resources/icon.icns || true
          chmod +x dist/McSkillLauncher.app/Contents/MacOS/McSkillLauncher
        shell: bash

      - name: Create .dmg (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir dmg-tmp
          cp -R dist/McSkillLauncher.app dmg-tmp/
          hdiutil create -volname "McSkillLauncher" -srcfolder dmg-tmp -ov -format UDZO mcskill-launcher-macos-x64.dmg
        shell: bash

      - name: Upload macOS .dmg
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: bin-macos-x64
          path: mcskill-launcher-macos-x64.dmg

      - name: Move output (Linux/Windows)
        if: matrix.os != 'macos-latest'
        run: |
          mv dist/main-${{ matrix.target }}${{ matrix.ext }} mcskill-launcher-${{ matrix.target }}${{ matrix.ext }}
        shell: bash

      - name: Upload artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: bin-macos-x64
          path: mcskill-launcher-macos-x64.zip

      - name: Upload artifact (Linux/Windows)
        if: matrix.os != 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.target }}
          path: mcskill-launcher-${{ matrix.target }}${{ matrix.ext }}

#  build-linux-arm64:
#    name: Build Linux ARM64
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v3
#        with:
#          platforms: arm64
#
#      - name: Build inside ARM64 container
#        run: |
#          docker run --rm --platform linux/arm64 \
#            -v "${{ github.workspace }}:/src" \
#            -w /src arm64v8/python:3.12 bash -c "
#              apt update &&
#              apt install -y build-essential curl &&
#              pip install -r requirements.txt &&
#              pip install pyinstaller &&
#              pyinstaller main.py --name main-linux-arm64 --onefile --noupx &&
#              mv dist/main-linux-arm64 mcskill-launcher-linux-arm64
#            "
#
#      - name: Upload ARM64 artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: bin-linux-arm64
#          path: mcskill-launcher-linux-arm64

  release:
    name: Create GitHub Release
    needs: [build-all]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-binaries

      - name: Flatten all files
        run: |
          mkdir final
          find all-binaries -type f -exec mv {} final/ \;

      - name: Confirm files
        run: ls -lh final/

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1.13.0
        with:
          tag: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          artifacts: |
            final/*
